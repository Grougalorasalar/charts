{{- /*
Copyright Broadcom, Inc. All Rights Reserved.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: v1
kind: Service
metadata:
  name: {{ template "grafana-tempo.distributor.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: distributor
  {{- if or .Values.commonAnnotations .Values.distributor.service.annotations }}
  {{- $annotations := include "common.tplvalues.merge" ( dict "values" ( list .Values.distributor.service.annotations .Values.commonAnnotations ) "context" . ) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.distributor.service.type }}
  {{- if .Values.distributor.service.sessionAffinity }}
  sessionAffinity: {{ .Values.distributor.service.sessionAffinity }}
  {{- end }}
  {{- if .Values.distributor.service.sessionAffinityConfig }}
  sessionAffinityConfig: {{- include "common.tplvalues.render" (dict "value" .Values.distributor.service.sessionAffinityConfig "context" $) | nindent 4 }}
  {{- end }}
  {{- if and .Values.distributor.service.clusterIP (eq .Values.distributor.service.type "ClusterIP") }}
  clusterIP: {{ .Values.distributor.service.clusterIP }}
  {{- end }}
  {{- if or (eq .Values.distributor.service.type "LoadBalancer") (eq .Values.distributor.service.type "NodePort") }}
  externalTrafficPolicy: {{ .Values.distributor.service.externalTrafficPolicy | quote }}
  {{- end }}
  {{- if and (eq .Values.distributor.service.type "LoadBalancer") (not (empty .Values.distributor.service.loadBalancerSourceRanges)) }}
  loadBalancerSourceRanges: {{ .Values.distributor.service.loadBalancerSourceRanges }}
  {{- end }}
  {{- if and (eq .Values.distributor.service.type "LoadBalancer") (not (empty .Values.distributor.service.loadBalancerIP)) }}
  loadBalancerIP: {{ .Values.distributor.service.loadBalancerIP }}
  {{- end }}
  ports:
    - name: http
      port: {{ .Values.distributor.service.ports.http }}
      targetPort: http
      protocol: TCP
      {{- if (and (or (eq .Values.distributor.service.type "NodePort") (eq .Values.distributor.service.type "LoadBalancer")) (not (empty .Values.distributor.service.nodePorts.http))) }}
      nodePort: {{ .Values.distributor.service.nodePorts.http }}
      {{- else if eq .Values.distributor.service.type "ClusterIP" }}
      nodePort: null
      {{- end }}
    - name: grpc
      port: {{ .Values.distributor.service.ports.grpc }}
      protocol: TCP
      targetPort: grpc
      {{- if (and (or (eq .Values.distributor.service.type "NodePort") (eq .Values.distributor.service.type "LoadBalancer")) (not (empty .Values.distributor.service.nodePorts.grpc))) }}
      nodePort: {{ .Values.distributor.service.nodePorts.grpc }}
      {{- else if eq .Values.distributor.service.type "ClusterIP" }}
      nodePort: null
      {{- end }}
    ## From here we use non-configurable, standard ports
    {{- if .Values.tempo.traces.jaeger.thriftCompact.enabled }}
    - name: distributor-jaeger-thrift-compact
      port: {{ .Values.tempo.traces.jaeger.thriftCompact.port }}
      protocol: UDP
      targetPort: jaeger-compact
    {{- end }}
    {{- if .Values.tempo.traces.jaeger.thriftBinary.enabled }}
    - name: distributor-jaeger-thrift-binary
      port: {{ .Values.tempo.traces.jaeger.thriftBinary.port }}
      protocol: UDP
      targetPort: jaeger-binary
    {{- end }}
    {{- if .Values.tempo.traces.jaeger.thriftHttp.enabled }}
    - name: distributor-jaeger-thrift-http
      port: {{ .Values.tempo.traces.jaeger.thriftHttp.port }}
      protocol: TCP
      targetPort: jaeger-http
    {{- end }}
    {{- if .Values.tempo.traces.jaeger.grpc.enabled }}
    - name: distributor-jaeger-grpc
      port: {{ .Values.tempo.traces.jaeger.grpc.port }}
      protocol: TCP
      targetPort: jaeger-grpc
    {{- end }}
    {{- if .Values.tempo.traces.zipkin.enabled }}
    - name: distributor-zipkin
      port: {{ .Values.tempo.traces.zipkin.port }}
      protocol: TCP
      targetPort: zipkin
    {{- end }}
    {{- if .Values.tempo.traces.otlp.http.enabled }}
    - name: distributor-otlp-http
      port: {{ .Values.tempo.traces.otlp.http.port }}
      protocol: TCP
      targetPort: otlp-http
    {{- if .Values.tempo.traces.otlp.http.enabledLegacy }}
    - name: distributor-otlp-http-legacy
      port: 55681
      protocol: TCP
      targetPort: otlp-http
    {{- end }}
    {{- end }}
    {{- if .Values.tempo.traces.otlp.grpc.enabled }}
    - name: distributor-otlp-grpc
      port: {{ .Values.tempo.traces.otlp.grpc.port }}
      protocol: TCP
      targetPort: otlp-grpc
    {{- if .Values.tempo.traces.otlp.grpc.enabledLegacy }}
    - name: distributor-otlp-grpc-legacy
      port: 55680
      protocol: TCP
      targetPort: otlp-grpc
    {{- end }}
    {{- end }}
    {{- if .Values.tempo.traces.opencensus.enabled }}
    - name: distributor-opencensus
      port: {{ .Values.tempo.traces.opencensus.port }}
      protocol: TCP
      targetPort: opencensus
    {{- end }}
    {{- if .Values.distributor.service.extraPorts }}
    {{- include "common.tplvalues.render" (dict "value" .Values.distributor.service.extraPorts "context" $) | nindent 4 }}
    {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.distributor.podLabels .Values.commonLabels ) "context" . ) }}
  selector: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: distributor
